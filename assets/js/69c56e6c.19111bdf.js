"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[1710],{4729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"QuickStart","title":"Snitch Quick Start Guide","description":"This guide will help you quickly set up a basic web service using Snitch.","source":"@site/docs/QuickStart.md","sourceDirName":".","slug":"/QuickStart","permalink":"/docs/QuickStart","draft":false,"unlisted":false,"editUrl":"https://github.com/memoizr/snitch/tree/master/guides/docs/QuickStart.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Snitch","permalink":"/docs/Docs"},"next":{"title":"Snitch Tutorials","permalink":"/docs/tutorials/"}}');var s=t(4848),r=t(8453);const a={},l="Snitch Quick Start Guide",o={},d=[{value:"Installation",id:"installation",level:2},{value:"Hello World Example",id:"hello-world-example",level:2},{value:"Creating a RESTful API",id:"creating-a-restful-api",level:2},{value:"Parameter Validation",id:"parameter-validation",level:2},{value:"Adding Middleware",id:"adding-middleware",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Using Conditions",id:"using-conditions",level:2},{value:"Testing Your API",id:"testing-your-api",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"snitch-quick-start-guide",children:"Snitch Quick Start Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you quickly set up a basic web service using Snitch."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"Add Snitch to your project dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'dependencies {\n    implementation("io.github.memoizr:snitch-bootstrap:1.0.0")\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hello-world-example",children:"Hello World Example"}),"\n",(0,s.jsx)(n.p,{children:'Create a simple "Hello World" service:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'import snitch.gson.GsonJsonParser\nimport snitch.dsl.snitch\nimport snitch.dsl.routes\nimport snitch.dsl.response.ok\n\nfun main() {\n    snitch(GsonJsonParser)\n        .onRoutes {\n            GET("hello") isHandledBy { "world".ok }\n        }\n        .start()\n        .serveDocumenation()\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This creates a service that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['Responds with "world" when you make a GET request to ',(0,s.jsx)(n.code,{children:"/hello"})]}),"\n",(0,s.jsxs)(n.li,{children:["Automatically generates API documentation available at ",(0,s.jsx)(n.code,{children:"/docs"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-restful-api",children:"Creating a RESTful API"}),"\n",(0,s.jsx)(n.p,{children:"Let's create a more realistic example with multiple endpoints:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'import snitch.gson.GsonJsonParser\nimport snitch.dsl.*\nimport snitch.dsl.response.*\n\n// Define our data classes\ndata class User(val id: String, val name: String, val email: String)\ndata class CreateUserRequest(val name: String, val email: String)\n\n// In-memory storage for this example\nval users = mutableMapOf<String, User>()\n\nfun main() {\n    snitch(GsonJsonParser)\n        .onRoutes {\n            "users" / {\n                // GET /users - List all users\n                GET() isHandledBy { \n                    users.values.toList().ok \n                }\n                \n                // POST /users - Create a new user\n                POST() with body<CreateUserRequest>() isHandledBy { \n                    val id = java.util.UUID.randomUUID().toString()\n                    val user = User(id, body.name, body.email)\n                    users[id] = user\n                    user.created\n                }\n                \n                // GET /users/{userId} - Get a specific user\n                userId / {\n                    GET() isHandledBy {\n                        val id = request[userId]\n                        users[id]?.ok ?: "User not found".notFound()\n                    }\n                    \n                    // DELETE /users/{userId} - Delete a user\n                    DELETE() isHandledBy {\n                        val id = request[userId]\n                        if (users.containsKey(id)) {\n                            users.remove(id)\n                            "User deleted".ok\n                        } else {\n                            "User not found".notFound()\n                        }\n                    }\n                }\n            }\n        }\n        .start()\n        .serveDocumenation()\n}\n\n// Define a path parameter\nval userId by path()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"parameter-validation",children:"Parameter Validation"}),"\n",(0,s.jsx)(n.p,{children:"Let's enhance our API with parameter validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'// Define validated parameters\nval limit by query(ofNonNegativeInt(max = 30, default = 10))\nval offset by query(ofNonNegativeInt(default = 0))\nval email by query(ofEmail)\n\n// Define our own custom validator\nval ofEmail = stringValidator("valid email") { \n    it.contains("@") && it.contains(".") \n}\n\n// Use in routes\n"users" / {\n    // GET /users?limit=10&offset=0\n    GET() with listOf(limit, offset) isHandledBy {\n        users.values\n            .toList()\n            .drop(request[offset])\n            .take(request[limit])\n            .ok\n    }\n    \n    // GET /users/search?email=user@example.com\n    "search" / {\n        GET() with email isHandledBy {\n            val searchEmail = request[email]\n            users.values\n                .filter { it.email == searchEmail }\n                .toList()\n                .ok\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"adding-middleware",children:"Adding Middleware"}),"\n",(0,s.jsx)(n.p,{children:"Implement a simple logging middleware:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val Router.log get() = decorating {\n    println("\u27a1\ufe0f ${request.method} ${request.path} - Request started")\n    val response = next()\n    println("\u2b05\ufe0f ${request.method} ${request.path} - Response: ${response.statusCode}")\n    response\n}\n\n// Apply middleware to routes\nroutes {\n    log {\n        "users" / {\n            // All user routes will be logged\n            GET() isHandledBy { users.values.toList().ok }\n            // ...\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(n.p,{children:"Implement a basic authentication system:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'// Authentication middleware\nval Router.authenticated get() = decorating {\n    val authHeader = request.headerParams("Authorization")\n    if (authHeader != null && authHeader.startsWith("Bearer ")) {\n        val token = authHeader.substring(7)\n        if (isValidToken(token)) {\n            next() // Proceed to the handler\n        } else {\n            "Invalid token".unauthorized()\n        }\n    } else {\n        "Authentication required".unauthorized()\n    }\n}\n\n// Apply to protected routes\nroutes {\n    "public" / {\n        // Public endpoints...\n    }\n    \n    "api" / {\n        authenticated {\n            // Protected endpoints...\n            "profile" / {\n                GET() isHandledBy { getCurrentUser().ok }\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-conditions",children:"Using Conditions"}),"\n",(0,s.jsx)(n.p,{children:"Implement access control with conditions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'// Define conditions\nval isAdmin = condition("isAdmin") {\n    val user = getCurrentUser()\n    if (user.role == "ADMIN") {\n        ConditionResult.Successful\n    } else {\n        ConditionResult.Failed("Admin access required".forbidden())\n    }\n}\n\n// Apply conditions to endpoints\n"admin" / {\n    // This endpoint requires admin privileges\n    GET("dashboard") onlyIf isAdmin isHandledBy { \n        getAdminDashboard().ok \n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-api",children:"Testing Your API"}),"\n",(0,s.jsx)(n.p,{children:"Test your endpoints with the built-in testing DSL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class UserApiTest : SnitchTest({ port -> setupApp(port) }) {\n    \n    @Test\n    fun `get all users returns 200`() {\n        GET("/users")\n            .expectCode(200)\n            .expectBodyContains("[]") // Initially empty\n    }\n    \n    @Test\n    fun `create user returns 201`() {\n        POST("/users")\n            .withBody("""{"name":"John","email":"john@example.com"}""")\n            .expectCode(201)\n            .expectBodyContains("John")\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you have a basic understanding of Snitch, explore:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation Generation"}),": Learn how to enhance your API documentation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Implement global exception handlers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Validators"}),": Create complex validation rules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Coroutines"}),": Use Kotlin coroutines for asynchronous operations"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For more details, check out:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/Docs",children:"Snitch Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"tutorials/",children:"Tutorials"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);