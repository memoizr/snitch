"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[1346],{4926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/PropertyBasedTesting","title":"Property-Based Testing with Kofix","description":"This tutorial introduces property-based testing in Snitch applications using the Kofix library. You\'ll learn how to use Kofix to generate test data, write more robust tests, and reduce test boilerplate.","source":"@site/docs/tutorials/PropertyBasedTesting.md","sourceDirName":"tutorials","slug":"/tutorials/PropertyBasedTesting","permalink":"/docs/tutorials/PropertyBasedTesting","draft":false,"unlisted":false,"editUrl":"https://github.com/memoizr/snitch/tree/master/guides/docs/tutorials/PropertyBasedTesting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Integration Tutorial","permalink":"/docs/tutorials/DatabaseIntegration"},"next":{"title":"Snitch Quick Start Guide","permalink":"/docs/tutorials/QuickStart"}}');var a=n(4848),r=n(8453);const i={},o="Property-Based Testing with Kofix",l={},d=[{value:"What is Property-Based Testing?",id:"what-is-property-based-testing",level:2},{value:"Getting Started with Kofix",id:"getting-started-with-kofix",level:2},{value:"Installation",id:"installation",level:3},{value:"Creating Your First Property-Based Test",id:"creating-your-first-property-based-test",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Random Object Generation",id:"random-object-generation",level:3},{value:"Customizing Generated Objects",id:"customizing-generated-objects",level:3},{value:"Collections of Random Objects",id:"collections-of-random-objects",level:3},{value:"Integration with Snitch Tests",id:"integration-with-snitch-tests",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Global Type Customization",id:"global-type-customization",level:3},{value:"Seed Control for Reproducible Tests",id:"seed-control-for-reproducible-tests",level:3},{value:"Testing with Interfaces and Abstract Classes",id:"testing-with-interfaces-and-abstract-classes",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Combine Property-Based and Example-Based Testing",id:"1-combine-property-based-and-example-based-testing",level:3},{value:"2. Use Custom Generators for Domain Constraints",id:"2-use-custom-generators-for-domain-constraints",level:3},{value:"3. Structure Test Data for Readability",id:"3-structure-test-data-for-readability",level:3},{value:"4. Test Boundary Cases Explicitly",id:"4-test-boundary-cases-explicitly",level:3},{value:"Common Pitfalls and Solutions",id:"common-pitfalls-and-solutions",level:2},{value:"Slow Tests Due to Large Object Graphs",id:"slow-tests-due-to-large-object-graphs",level:3},{value:"Non-Deterministic Test Failures",id:"non-deterministic-test-failures",level:3},{value:"Unnecessary Object Creation",id:"unnecessary-object-creation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"property-based-testing-with-kofix",children:"Property-Based Testing with Kofix"})}),"\n",(0,a.jsx)(t.p,{children:"This tutorial introduces property-based testing in Snitch applications using the Kofix library. You'll learn how to use Kofix to generate test data, write more robust tests, and reduce test boilerplate."}),"\n",(0,a.jsx)(t.h2,{id:"what-is-property-based-testing",children:"What is Property-Based Testing?"}),"\n",(0,a.jsx)(t.p,{children:"Property-based testing is an approach where instead of writing tests with specific input values, you define properties that should hold true for all possible inputs. The testing framework then generates random inputs to verify these properties."}),"\n",(0,a.jsx)(t.p,{children:"This approach has several advantages:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Discovers edge cases you might not think of"}),"\n",(0,a.jsx)(t.li,{children:"Reduces test maintenance as requirements change"}),"\n",(0,a.jsx)(t.li,{children:"Provides better test coverage with less code"}),"\n",(0,a.jsx)(t.li,{children:"Helps identify subtle bugs that appear only with specific inputs"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"getting-started-with-kofix",children:"Getting Started with Kofix"}),"\n",(0,a.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(t.p,{children:"First, add the Kofix dependency to your project:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'dependencies {\n    testImplementation("io.github.memoizr:snitch-kofix:1.0.0")\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"creating-your-first-property-based-test",children:"Creating Your First Property-Based Test"}),"\n",(0,a.jsx)(t.p,{children:"Let's start with a simple example - testing a user registration service:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"class UserServiceTest {\n    // Create random test data using property delegation\n    val user by aRandom<User>()\n    val email by aRandom<Email>()\n    \n    @Test\n    fun `registered users can be retrieved by email`() {\n        // Act\n        userService.register(user)\n        \n        // Assert\n        val retrievedUser = userService.findByEmail(user.email)\n        assertEquals(user.id, retrievedUser?.id)\n        assertEquals(user.name, retrievedUser?.name)\n    }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In this example, Kofix automatically generates random ",(0,a.jsx)(t.code,{children:"User"})," objects with all required properties filled with sensible random values."]}),"\n",(0,a.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,a.jsx)(t.h3,{id:"random-object-generation",children:"Random Object Generation"}),"\n",(0,a.jsx)(t.p,{children:"Kofix can generate random instances of any class:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Simple types\nval randomString by aRandom<String>()\nval randomInt by aRandom<Int>()\nval randomInstant by aRandom<Instant>()\n\n// Domain objects\nval user by aRandom<User>()\nval product by aRandom<Product>()\n\n// Even complex generic types\nval listOfMaps by aRandom<List<Map<String, User>>>()\n"})}),"\n",(0,a.jsx)(t.h3,{id:"customizing-generated-objects",children:"Customizing Generated Objects"}),"\n",(0,a.jsx)(t.p,{children:"Often you need to customize the generated objects for specific test scenarios:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Customize individual instances\nval activeUser by aRandom<User> { \n    copy(status = UserStatus.ACTIVE, verifiedEmail = true) \n}\n\n// Customize with dependencies between objects\nval order by aRandom<Order>()\nval orderItem by aRandom<OrderItem> {\n    copy(orderId = order.id)\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"collections-of-random-objects",children:"Collections of Random Objects"}),"\n",(0,a.jsx)(t.p,{children:"For testing with collections:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Random lists with default size (1-10 elements)\nval users by aRandomListOf<User>() \n\n// Fixed size\nval fiveProducts by aRandomListOf<Product>(size = 5)\n\n// Size range\nval orders by aRandomListOf<Order>(minSize = 2, maxSize = 10)\n\n// Customized lists\nval activeUsers by aRandomListOf<User> {\n    map { it.copy(status = UserStatus.ACTIVE) }\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"integration-with-snitch-tests",children:"Integration with Snitch Tests"}),"\n",(0,a.jsx)(t.p,{children:"Kofix is particularly powerful when combined with Snitch's testing framework. Let's see how to use it in API tests:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'class UserApiTest : SnitchTest({ Application.setup(it) }) {\n    // Test data\n    val user by aRandom<User>()\n    val createUserRequest by aRandom<CreateUserRequest>()\n    val updateUserRequest by aRandom<UpdateUserRequest>()\n    \n    // JWT tokens for authentication\n    lateinit var userToken: String\n    \n    @BeforeEach\n    fun setup() {\n        // Use the random user to create a real user in the system\n        userService.createUser(user)\n        userToken = jwtService.createToken(user.id)\n    }\n    \n    @Test\n    fun `authenticated users can update their profile`() {\n        // Send a PUT request with random data\n        PUT("/users/${user.id}")\n            .withHeaders(mapOf("Authorization" to "Bearer $userToken"))\n            .withBody(updateUserRequest)\n            .expectCode(200)\n        \n        // Verify the update was applied\n        GET("/users/${user.id}")\n            .withHeaders(mapOf("Authorization" to "Bearer $userToken"))\n            .expectCode(200)\n            .expectJsonPath("$.name", updateUserRequest.name)\n            .expectJsonPath("$.email", updateUserRequest.email)\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Here's a more complete example based on the ",(0,a.jsx)(t.code,{children:"PostsRoutesTest"})," from the Snitch example project:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'class PostsRoutesTest : BaseTest() {\n    // Random data for our tests\n    val createPostRequest by aRandom<CreatePostRequest>()\n    val updatePostRequest by aRandom<UpdatePostRequest>()\n\n    // Different users with different roles\n    val otherUser by aRandom<User>()\n    val user by aRandom<User>()\n    val admin by aRandom<User> { copy(role = Role.ADMIN) }\n    \n    // Posts owned by different users\n    val post by aRandom<Post> { \n        copy(creator = UserView(user.id, user.name), createdAt = now()) \n    }\n    val postByOtherUser by aRandom<Post> { \n        copy(creator = UserView(otherUser.id, otherUser.name), createdAt = now()) \n    }\n\n    // Authentication tokens\n    lateinit var userToken: String\n    lateinit var adminToken: String\n\n    @BeforeEach\n    fun setup() {\n        // Setup test environment with our random users\n        userToken = user.create().let { jwt().newToken(JWTClaims(user.id, Role.USER)) }\n        adminToken = admin.create().let { jwt().newToken(JWTClaims(admin.id, Role.ADMIN)) }\n        otherUser.create()\n    }\n\n    @Test\n    fun `a logged in user can create a post then view it`() {\n        // Create a post with random data\n        POST("/users/${user.id.value}/posts")\n            .withHeaders(mapOf("X-Access-Token" to userToken))\n            .withBody(createPostRequest)\n            .expectCode(201)\n\n        // Verify we can view the created post\n        GET("/users/${user.id.value}/posts")\n            .withHeaders(mapOf("X-Access-Token" to userToken))\n            .expectCode(200)\n            .expectJsonPath("$.posts[0].title", createPostRequest.title)\n            .expectJsonPath("$.posts[0].content", createPostRequest.content)\n    }\n    \n    @Test\n    fun `a user cannot post on another user\'s behalf`() {\n        POST("/users/${otherUser.id.value}/posts")\n            .withHeaders(mapOf("X-Access-Token" to userToken))\n            .withBody(createPostRequest)\n            .expectCode(403)\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(t.h3,{id:"global-type-customization",children:"Global Type Customization"}),"\n",(0,a.jsx)(t.p,{children:"For consistent data generation across tests, customize types globally:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'// In your BaseTest class\ninit {\n    // Custom email format\n    customize<Email> { Email("${randomString()}@example.com") }\n    \n    // Current timestamp for all tests\n    customize<Instant> { clock.now() }\n    \n    // UUIDs for IDs\n    customize<UserId> { UserId(UUID.randomUUID().toString()) }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The example project does this in ",(0,a.jsx)(t.code,{children:"BaseTest.kt"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"abstract class BaseTest : SnitchTest({ Application.setup(it) }) {\n    init {\n        connection()\n        customize<Email> { Email(\"${randomString()}@${randomString()}.com\") }\n    }\n    \n    fun randomString(n: Int = 1, m: Int = 5): String {\n        val length = Random.nextInt(n, m + 1)\n        val chars = ('a'..'z') + ('A'..'Z') + ('0'..'9')\n        return List(length) { chars.random() }.joinToString(\"\")\n    }\n    \n    // ...\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"seed-control-for-reproducible-tests",children:"Seed Control for Reproducible Tests"}),"\n",(0,a.jsx)(t.p,{children:"Control randomness with seeds for reproducible tests:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Fixed seed for deterministic tests\n@BeforeEach\nfun setupSeed() {\n    Seed.seed = 12345L // Same random values every time\n}\n\n// Test mode for consistent random values within a test\n@BeforeEach\nfun setupTestMode() {\n    Seed.testing = true // Different between test runs but consistent within a test\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"testing-with-interfaces-and-abstract-classes",children:"Testing with Interfaces and Abstract Classes"}),"\n",(0,a.jsx)(t.p,{children:"Kofix can even generate implementations of interfaces and abstract classes:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Generates a mock implementation of the interface\nval repository by aRandom<UserRepository>()\n\n@Test\nfun `test with mock repository`() {\n    // The mock implementation will return random data\n    val users = repository.findAllUsers()\n    assertTrue(users.isNotEmpty())\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(t.h3,{id:"1-combine-property-based-and-example-based-testing",children:"1. Combine Property-Based and Example-Based Testing"}),"\n",(0,a.jsx)(t.p,{children:"Use property-based testing for broad verification and example-based testing for specific cases:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'@Test\nfun `email validation rejects invalid formats`() {\n    // Property-based: generate many random invalid emails\n    repeat(100) {\n        val invalidEmail = "${a<String>()}${a<String>()}"\n        assertFalse(emailValidator.isValid(invalidEmail))\n    }\n    \n    // Example-based: specific cases that must work\n    assertTrue(emailValidator.isValid("user@example.com"))\n    assertFalse(emailValidator.isValid("user@"))\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"2-use-custom-generators-for-domain-constraints",children:"2. Use Custom Generators for Domain Constraints"}),"\n",(0,a.jsx)(t.p,{children:"Create custom generators for domain-specific constraints:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'// In your BaseTest class\ninit {\n    // Valid product codes must follow a pattern\n    customize<ProductCode> { \n        val category = listOf("HW", "SW", "SRV").random()\n        val number = (1000..9999).random()\n        ProductCode("$category-$number") \n    }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"3-structure-test-data-for-readability",children:"3. Structure Test Data for Readability"}),"\n",(0,a.jsx)(t.p,{children:"Structure your test data declarations for better readability:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"class OrderTest {\n    // Group related test data together\n    object TestUsers {\n        val customer by aRandom<User>()\n        val admin by aRandom<User> { copy(role = Role.ADMIN) }\n    }\n    \n    object TestProducts {\n        val inStock by aRandom<Product> { copy(stockQuantity = 100) }\n        val outOfStock by aRandom<Product> { copy(stockQuantity = 0) }\n    }\n    \n    // Use the structured data in tests\n    @Test\n    fun `customers cannot order out-of-stock products`() {\n        val result = orderService.placeOrder(\n            TestUsers.customer, \n            TestProducts.outOfStock, \n            quantity = 1\n        )\n        \n        assertEquals(OrderResult.OUT_OF_STOCK, result)\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"4-test-boundary-cases-explicitly",children:"4. Test Boundary Cases Explicitly"}),"\n",(0,a.jsx)(t.p,{children:"Even with property-based testing, explicitly test boundary cases:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"@Test\nfun `boundary cases are handled correctly`() {\n    // Zero quantity\n    val zeroQuantityOrder by aRandom<Order> { copy(quantity = 0) }\n    assertFalse(orderValidator.isValid(zeroQuantityOrder))\n    \n    // Maximum quantity\n    val maxQuantityOrder by aRandom<Order> { copy(quantity = MAX_QUANTITY) }\n    assertTrue(orderValidator.isValid(maxQuantityOrder))\n    \n    // Quantity just above maximum\n    val tooLargeOrder by aRandom<Order> { copy(quantity = MAX_QUANTITY + 1) }\n    assertFalse(orderValidator.isValid(tooLargeOrder))\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"common-pitfalls-and-solutions",children:"Common Pitfalls and Solutions"}),"\n",(0,a.jsx)(t.h3,{id:"slow-tests-due-to-large-object-graphs",children:"Slow Tests Due to Large Object Graphs"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Problem"}),": Tests are slow because Kofix generates large object graphs."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Solution"}),": Limit collection sizes and customize complex objects:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Limit collection sizes\nval smallList by aRandomListOf<ComplexObject>(maxSize = 3)\n\n// Simplify complex objects\ncustomize<ComplexObject> {\n    // Create a simplified version with only essential properties\n    ComplexObject(\n        id = a<Id>(),\n        name = a<String>(),\n        // Use empty collections instead of generating them\n        references = emptyList()\n    )\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"non-deterministic-test-failures",children:"Non-Deterministic Test Failures"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Problem"}),": Tests sometimes fail due to randomness."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Solution"}),": Use seed control and properly constrain your generators:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'@BeforeEach\nfun setupSeed() {\n    // When a test fails, log the seed value and use it here to reproduce\n    Seed.seed = System.getProperty("test.seed")?.toLongOrNull() \n        ?: Random.nextLong().also { println("Test seed: $it") }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"unnecessary-object-creation",children:"Unnecessary Object Creation"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Problem"}),": Creating too many objects when only a few properties are needed."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Solution"}),": Use domain-specific generators or customize at use:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'// Instead of a full user with all properties\nval simpleUser by aRandom<User> {\n    // Keep only what you need for the test\n    copy(\n        email = Email("test@example.com"),\n        password = null,\n        profile = null,\n        settings = emptyMap(),\n        // Clear other complex properties\n        address = null\n    )\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(t.p,{children:"Property-based testing with Kofix helps you write more robust tests with less code. By generating random but valid test data, you can discover edge cases and ensure your code works correctly across a wide range of inputs."}),"\n",(0,a.jsx)(t.p,{children:"Kofix integrates seamlessly with Snitch's testing framework, making it easy to test your API endpoints with realistic, randomly generated data. This approach is particularly valuable for testing business logic, validation rules, and API endpoints."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);