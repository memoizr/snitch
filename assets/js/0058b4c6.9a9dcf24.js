"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Snitch","href":"/docs/Docs","docId":"Docs","unlisted":false},{"type":"link","label":"Kotlin\'s Most Elegant HTTP Framework","href":"/docs/What is Snitch","docId":"What is Snitch","unlisted":false},{"type":"category","label":"Deep Dive","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Endpoint DSL","href":"/docs/in depth/Anatomy-of-Endpoints","docId":"in depth/Anatomy-of-Endpoints","unlisted":false},{"type":"link","label":"Handler DSL","href":"/docs/in depth/Anatomy-of-Handlers","docId":"in depth/Anatomy-of-Handlers","unlisted":false},{"type":"link","label":"Validator DSL","href":"/docs/in depth/Anatomy-of-Validators","docId":"in depth/Anatomy-of-Validators","unlisted":false},{"type":"link","label":"In-Depth: Database Integration with Exposed","href":"/docs/in depth/Database-Integration-With-Exposed","docId":"in depth/Database-Integration-With-Exposed","unlisted":false},{"type":"link","label":"Before and After Actions","href":"/docs/in depth/Mastering-Snitch-BeforeAfter","docId":"in depth/Mastering-Snitch-BeforeAfter","unlisted":false},{"type":"link","label":"Conditions","href":"/docs/in depth/Mastering-Snitch-Conditions","docId":"in depth/Mastering-Snitch-Conditions","unlisted":false},{"type":"link","label":"Decorations","href":"/docs/in depth/Mastering-Snitch-Decorations","docId":"in depth/Mastering-Snitch-Decorations","unlisted":false},{"type":"link","label":"Parameters","href":"/docs/in depth/Mastering-Snitch-Parameters","docId":"in depth/Mastering-Snitch-Parameters","unlisted":false},{"type":"link","label":"Validators","href":"/docs/in depth/Mastering-Snitch-Validators","docId":"in depth/Mastering-Snitch-Validators","unlisted":false}],"href":"/docs/in depth/"},{"type":"category","label":"resources","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Snitch Artifacts","href":"/docs/resources/Artifacts","docId":"resources/Artifacts","unlisted":false},{"type":"link","label":"Database Integration with Snitch Exposed","href":"/docs/resources/Database-Integration","docId":"resources/Database-Integration","unlisted":false}]},{"type":"category","label":"Snitch Tutorials","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Database Integration Tutorial","href":"/docs/tutorials/DatabaseIntegration","docId":"tutorials/DatabaseIntegration","unlisted":false},{"type":"link","label":"Property-Based Testing with Kofix","href":"/docs/tutorials/PropertyBasedTesting","docId":"tutorials/PropertyBasedTesting","unlisted":false},{"type":"link","label":"Snitch Quick Start Guide","href":"/docs/tutorials/QuickStart","docId":"tutorials/QuickStart","unlisted":false},{"type":"link","label":"Shank in Action: Building a Real-World Application","href":"/docs/tutorials/ShankInAction","docId":"tutorials/ShankInAction","unlisted":false},{"type":"link","label":"Advanced Shank Design Patterns","href":"/docs/tutorials/ShankPatterns","docId":"tutorials/ShankPatterns","unlisted":false},{"type":"link","label":"Using Shank with Snitch","href":"/docs/tutorials/UsingShank","docId":"tutorials/UsingShank","unlisted":false}],"href":"/docs/tutorials/"}]},"docs":{"Docs":{"id":"Docs","title":"Snitch","description":"Introduction","sidebar":"tutorialSidebar"},"in depth/Anatomy-of-Endpoints":{"id":"in depth/Anatomy-of-Endpoints","title":"Endpoint DSL","description":"Endpoints are the fundamental building blocks of your API in Snitch. This guide explores the internal structure of the Endpoint DSL, explaining how endpoints are defined, configured, and composed to create expressive, type-safe APIs.","sidebar":"tutorialSidebar"},"in depth/Anatomy-of-Handlers":{"id":"in depth/Anatomy-of-Handlers","title":"Handler DSL","description":"Handlers are the core of your API\'s business logic in Snitch. They process incoming requests, execute application code, and produce responses. This guide explores the inner workings of Snitch\'s Handler DSL, explaining how handlers are defined, composed, and integrated with the rest of the framework.","sidebar":"tutorialSidebar"},"in depth/Anatomy-of-Validators":{"id":"in depth/Anatomy-of-Validators","title":"Validator DSL","description":"Validators are a cornerstone of Snitch\'s design, ensuring that HTTP inputs are properly validated and transformed into domain types. This guide explores the internal workings of the validator DSL, explaining each component and how they fit together.","sidebar":"tutorialSidebar"},"in depth/Database-Integration-With-Exposed":{"id":"in depth/Database-Integration-With-Exposed","title":"In-Depth: Database Integration with Exposed","description":"This document provides an in-depth exploration of Snitch\'s integration with the Exposed SQL library, focusing on the technical aspects and internal workings of the implementation.","sidebar":"tutorialSidebar"},"in depth/Mastering-Snitch-BeforeAfter":{"id":"in depth/Mastering-Snitch-BeforeAfter","title":"Before and After Actions","description":"The Before and After action mechanism in Snitch provides a powerful way to run code around your route handlers. It allows you to execute logic before a request is processed and after a response is generated, which is useful for cross-cutting concerns such as logging, authentication, authorization, and performance monitoring.","sidebar":"tutorialSidebar"},"in depth/Mastering-Snitch-Conditions":{"id":"in depth/Mastering-Snitch-Conditions","title":"Conditions","description":"Conditions are one of Snitch\'s most powerful features, allowing you to implement sophisticated access control and request validation with minimal code. This tutorial will guide you through everything you need to know about conditions, from basic usage to advanced patterns.","sidebar":"tutorialSidebar"},"in depth/Mastering-Snitch-Decorations":{"id":"in depth/Mastering-Snitch-Decorations","title":"Decorations","description":"Decorations are a powerful feature in Snitch that allow you to modify request handling behavior across multiple routes. They provide a clean, composable way to implement cross-cutting concerns like logging, authentication, transaction management, and more. This tutorial will guide you through everything you need to know about decorations, from basic usage to advanced patterns.","sidebar":"tutorialSidebar"},"in depth/Mastering-Snitch-Parameters":{"id":"in depth/Mastering-Snitch-Parameters","title":"Parameters","description":"Parameters are a fundamental part of HTTP communication, allowing clients to send data to your server. Snitch provides an expressive, type-safe approach to handling various types of parameters including path parameters, query parameters, headers, and request bodies.","sidebar":"tutorialSidebar"},"in depth/Mastering-Snitch-Validators":{"id":"in depth/Mastering-Snitch-Validators","title":"Validators","description":"Validators are a core feature of Snitch that ensure your HTTP inputs are properly validated, transformed, and documented. This guide will walk you through everything you need to know about validators, from basic usage to advanced customization.","sidebar":"tutorialSidebar"},"in depth/README":{"id":"in depth/README","title":"Deep Dive","description":"Welcome to the in-depth guides! This section contains detailed guides to help you master different aspects of Snitch.","sidebar":"tutorialSidebar"},"resources/Artifacts":{"id":"resources/Artifacts","title":"Snitch Artifacts","description":"Snitch is modular by design, providing several artifacts that can be used independently based on your needs. All artifacts are published to Maven Central.","sidebar":"tutorialSidebar"},"resources/Database-Integration":{"id":"resources/Database-Integration","title":"Database Integration with Snitch Exposed","description":"Snitch offers first-class database integration through its Exposed modules, providing a seamless, type-safe experience for working with relational databases in your applications. This guide explores how Snitch\'s Exposed modules help you integrate databases into your applications with minimal boilerplate and maximum type safety.","sidebar":"tutorialSidebar"},"tutorials/DatabaseIntegration":{"id":"tutorials/DatabaseIntegration","title":"Database Integration Tutorial","description":"This tutorial walks you through setting up a simple Snitch application with database integration using the Exposed modules. You\'ll learn how to connect to a database, define tables, implement CRUD operations, and handle transactions.","sidebar":"tutorialSidebar"},"tutorials/PropertyBasedTesting":{"id":"tutorials/PropertyBasedTesting","title":"Property-Based Testing with Kofix","description":"This tutorial introduces property-based testing in Snitch applications using the Kofix library. You\'ll learn how to use Kofix to generate test data, write more robust tests, and reduce test boilerplate.","sidebar":"tutorialSidebar"},"tutorials/QuickStart":{"id":"tutorials/QuickStart","title":"Snitch Quick Start Guide","description":"This guide will help you quickly set up a basic web service using Snitch.","sidebar":"tutorialSidebar"},"tutorials/README":{"id":"tutorials/README","title":"Snitch Tutorials","description":"Welcome to the Snitch tutorials! This section contains step-by-step guides to help you master different aspects of Snitch.","sidebar":"tutorialSidebar"},"tutorials/ShankInAction":{"id":"tutorials/ShankInAction","title":"Shank in Action: Building a Real-World Application","description":"This tutorial demonstrates how to use Shank, Snitch\'s powerful dependency injection library, to build a maintainable and testable real-world application. We\'ll create a blog platform with user authentication, post management, and comments.","sidebar":"tutorialSidebar"},"tutorials/ShankPatterns":{"id":"tutorials/ShankPatterns","title":"Advanced Shank Design Patterns","description":"This document explores powerful design patterns and techniques for using Shank effectively in your applications. While Shank is intuitive and straightforward by design, these patterns can help you tackle more complex scenarios with elegance and maintainability.","sidebar":"tutorialSidebar"},"tutorials/UsingShank":{"id":"tutorials/UsingShank","title":"Using Shank with Snitch","description":"Shank is a lightweight dependency injection (DI) library for Kotlin that integrates seamlessly with Snitch. This guide covers how to use Shank effectively in your Snitch applications.","sidebar":"tutorialSidebar"},"What is Snitch":{"id":"What is Snitch","title":"Kotlin\'s Most Elegant HTTP Framework","description":"In today\'s microservices-driven world, creating robust, well-documented, and maintainable HTTP APIs has become a critical challenge for development teams. Snitch emerges as a game-changing solution in this landscape\u2014a lightweight, type-safe Kotlin framework designed to help developers build production-grade HTTP layers with minimal effort while automatically generating comprehensive documentation.","sidebar":"tutorialSidebar"}}}}')}}]);