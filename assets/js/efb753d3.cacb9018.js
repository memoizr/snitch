"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[5220],{6086:e=>{e.exports=JSON.parse('{"permalink":"/snitch/blog/migrating-from-spring-to-snitch","editUrl":"https://github.com/memoizr/snitch/tree/main/guides/blog/2022-12-10-migrating-from-spring-to-snitch.md","source":"@site/blog/2022-12-10-migrating-from-spring-to-snitch.md","title":"Migration Guide: From Spring Boot to Snitch","description":"Many teams working with Kotlin find themselves using Spring Boot because it\'s the industry standard for Java applications. But as projects grow, they often encounter limitations with Spring\'s Java-centric approach when used with Kotlin. If you\'re considering migrating from Spring Boot to Snitch, this guide will help you navigate the transition with practical examples and a step-by-step approach.","date":"2022-12-10T00:00:00.000Z","tags":[{"inline":false,"label":"Snitch","permalink":"/snitch/blog/tags/snitch","description":"Posts about the Snitch HTTP framework for Kotlin"},{"inline":false,"label":"Spring Boot","permalink":"/snitch/blog/tags/spring-boot","description":"Articles related to the Spring Boot framework"},{"inline":false,"label":"Migration","permalink":"/snitch/blog/tags/migration","description":"Content about migrating between different frameworks or technologies"},{"inline":false,"label":"Kotlin","permalink":"/snitch/blog/tags/kotlin","description":"Posts about the Kotlin programming language and its ecosystem"}],"readingTime":6.19,"hasTruncateMarker":true,"authors":[{"name":"Snitch Team","title":"Snitch Framework Maintainers","url":"https://github.com/memoizr/snitch","page":{"permalink":"/snitch/blog/authors/snitch-team"},"imageURL":"https://github.com/memoizr.png","key":"snitch-team"}],"frontMatter":{"slug":"migrating-from-spring-to-snitch","title":"Migration Guide: From Spring Boot to Snitch","authors":["snitch-team"],"tags":["snitch","spring-boot","migration","kotlin"]},"unlisted":false,"prevItem":{"title":"Expressive Code at Scale: How Snitch Transforms API Development","permalink":"/snitch/blog/expressivity-and-scaling-with-snitch"},"nextItem":{"title":"The Inspiration Behind Snitch - Borrowing from the Best","permalink":"/snitch/blog/the-inspiration-behind-snitch"}}')},6500:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var t=i(6086),r=i(4848),s=i(8453);const o={slug:"migrating-from-spring-to-snitch",title:"Migration Guide: From Spring Boot to Snitch",authors:["snitch-team"],tags:["snitch","spring-boot","migration","kotlin"]},a="Migration Guide: From Spring Boot to Snitch",l={authorsImageUrls:[void 0]},c=[{value:"When to Consider Migration",id:"when-to-consider-migration",level:2},{value:"Migration Strategy: Incremental Approach",id:"migration-strategy-incremental-approach",level:2},{value:"Converting REST Controllers to Snitch Routes",id:"converting-rest-controllers-to-snitch-routes",level:2},{value:"Spring Boot Controller:",id:"spring-boot-controller",level:3},{value:"Equivalent Snitch Routes:",id:"equivalent-snitch-routes",level:3},{value:"Migrating Spring Security to Snitch Conditions",id:"migrating-spring-security-to-snitch-conditions",level:2},{value:"Spring Boot Security:",id:"spring-boot-security",level:3},{value:"Equivalent Snitch Implementation:",id:"equivalent-snitch-implementation",level:3},{value:"Migrating Validation Logic",id:"migrating-validation-logic",level:2},{value:"Spring Boot Validation:",id:"spring-boot-validation",level:3},{value:"Equivalent Snitch Validation:",id:"equivalent-snitch-validation",level:3},{value:"Migrating Exception Handling",id:"migrating-exception-handling",level:2},{value:"Spring Boot Exception Handling:",id:"spring-boot-exception-handling",level:3},{value:"Equivalent Snitch Exception Handling:",id:"equivalent-snitch-exception-handling",level:3},{value:"Adapting Spring Services",id:"adapting-spring-services",level:2},{value:"Configuration Migration",id:"configuration-migration",level:2},{value:"Spring Boot Configuration:",id:"spring-boot-configuration",level:3},{value:"Equivalent Snitch Configuration:",id:"equivalent-snitch-configuration",level:3},{value:"Testing Approach",id:"testing-approach",level:2},{value:"Spring Boot Test:",id:"spring-boot-test",level:3},{value:"Equivalent Snitch Test:",id:"equivalent-snitch-test",level:3},{value:"Conclusion: Embracing Idioms Over Conventions",id:"conclusion-embracing-idioms-over-conventions",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Many teams working with Kotlin find themselves using Spring Boot because it's the industry standard for Java applications. But as projects grow, they often encounter limitations with Spring's Java-centric approach when used with Kotlin. If you're considering migrating from Spring Boot to Snitch, this guide will help you navigate the transition with practical examples and a step-by-step approach."}),"\n",(0,r.jsx)(n.h2,{id:"when-to-consider-migration",children:"When to Consider Migration"}),"\n",(0,r.jsx)(n.p,{children:"Before diving into the how, let's address the when. Consider migrating from Spring Boot to Snitch if:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You're primarily using Kotlin and want to leverage its features more effectively"}),"\n",(0,r.jsx)(n.li,{children:'Your team struggles with Spring\'s annotation-heavy approach and "magic"'}),"\n",(0,r.jsx)(n.li,{children:"You need better performance, particularly startup time and memory usage"}),"\n",(0,r.jsx)(n.li,{children:"You want stronger compile-time guarantees and fewer runtime surprises"}),"\n",(0,r.jsx)(n.li,{children:"Your documentation is constantly out of sync with your code"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-strategy-incremental-approach",children:"Migration Strategy: Incremental Approach"}),"\n",(0,r.jsx)(n.p,{children:"The safest way to migrate is incrementally, especially for larger applications. Here's a proven strategy:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start with new endpoints"})," - Implement new functionality in Snitch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use the adapter pattern"})," - Create Snitch routes that delegate to existing Spring services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Migrate endpoints in groups"})," - Move related endpoints together"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Replace cross-cutting concerns"})," - Migrate authentication, logging, etc."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Eliminate Spring dependencies"})," - Finally remove Spring Boot completely"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Let's look at how this works in practice."}),"\n",(0,r.jsx)(n.h2,{id:"converting-rest-controllers-to-snitch-routes",children:"Converting REST Controllers to Snitch Routes"}),"\n",(0,r.jsx)(n.p,{children:"The most direct migration path is converting Spring controllers to Snitch routes."}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-controller",children:"Spring Boot Controller:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@RestController\n@RequestMapping("/api/users")\nclass UserController(private val userService: UserService) {\n    \n    @GetMapping\n    fun getAllUsers(\n        @RequestParam(defaultValue = "0") page: Int,\n        @RequestParam(defaultValue = "20") size: Int\n    ): ResponseEntity<List<User>> {\n        val users = userService.findAll(page, size)\n        return ResponseEntity.ok(users)\n    }\n    \n    @GetMapping("/{id}")\n    fun getUserById(@PathVariable id: Long): ResponseEntity<User> {\n        return userService.findById(id)\n            .map { ResponseEntity.ok(it) }\n            .orElse(ResponseEntity.notFound().build())\n    }\n    \n    @PostMapping\n    fun createUser(@RequestBody @Valid user: CreateUserRequest): ResponseEntity<User> {\n        val created = userService.create(user)\n        return ResponseEntity\n            .created(URI.create("/api/users/${created.id}"))\n            .body(created)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-routes",children:"Equivalent Snitch Routes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'// Define parameters\nval page by query(ofNonNegativeInt, default = 0)\nval size by query(ofIntRange(1, 100), default = 20)\nval userId by path(ofLong)\nval createUserRequest by body<CreateUserRequest>()\n\n// Define routes\nval userRoutes = routes {\n    "api" / "users" / {\n        GET() withQueries(page, size) isHandledBy {\n            val users = userService.findAll(request[page], request[size])\n            users.ok\n        }\n        \n        GET(userId) isHandledBy {\n            userService.findById(request[userId])\n                ?.ok\n                ?: "User not found".notFound()\n        }\n        \n        POST() with createUserRequest isHandledBy {\n            val user = userService.create(request[createUserRequest])\n            user.created\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrating-spring-security-to-snitch-conditions",children:"Migrating Spring Security to Snitch Conditions"}),"\n",(0,r.jsx)(n.p,{children:"Authentication and authorization are critical concerns. Here's how to migrate from Spring Security:"}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-security",children:"Spring Boot Security:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@Configuration\n@EnableWebSecurity\nclass SecurityConfig : WebSecurityConfigurerAdapter() {\n    override fun configure(http: HttpSecurity) {\n        http.authorizeRequests()\n            .antMatchers("/api/public/**").permitAll()\n            .antMatchers("/api/admin/**").hasRole("ADMIN")\n            .anyRequest().authenticated()\n            .and()\n            .oauth2ResourceServer().jwt()\n    }\n}\n\n@RestController\n@RequestMapping("/api/admin")\nclass AdminController {\n    @GetMapping("/dashboard")\n    @PreAuthorize("hasRole(\'ADMIN\')")\n    fun getDashboard(): ResponseEntity<Dashboard> {\n        // Implementation\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-implementation",children:"Equivalent Snitch Implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'// Authentication middleware\nval Router.authenticated get() = decorateWith {\n    val auth = request.headerParams("Authorization").firstOrNull()\n    if (auth == null || !auth.startsWith("Bearer ")) {\n        return@decorateWith "Unauthorized".unauthorized()\n    }\n    \n    val token = auth.substring(7)\n    val claims = jwtVerifier.verify(token)\n    \n    // Store in request attributes for later use\n    request.attributes["user"] = User.fromClaims(claims)\n    next()\n}\n\n// Role-based conditions\nval hasAdminRole = condition("hasAdminRole") {\n    val user = request.attributes["user"] as? User\n    if (user?.roles?.contains("ADMIN") == true) {\n        ConditionResult.Successful\n    } else {\n        ConditionResult.Failed("Admin role required".forbidden())\n    }\n}\n\n// Routes with authentication and authorization\nval adminRoutes = routes {\n    authenticated {\n        "api" / "admin" / {\n            "dashboard" / {\n                GET() onlyIf hasAdminRole isHandledBy {\n                    // Implementation\n                    dashboardService.getDashboard().ok\n                }\n            }\n        }\n    }\n    \n    "api" / "public" / {\n        // Public routes don\'t need authentication\n        GET("health") isHandledBy { "OK".ok }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrating-validation-logic",children:"Migrating Validation Logic"}),"\n",(0,r.jsx)(n.p,{children:"Spring's validation relies heavily on Bean Validation annotations. Here's how to migrate to Snitch's validator system:"}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-validation",children:"Spring Boot Validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'data class CreateUserRequest(\n    @field:NotBlank(message = "Name is required")\n    val name: String,\n    \n    @field:Email(message = "Valid email is required")\n    @field:NotBlank(message = "Email is required")\n    val email: String,\n    \n    @field:Min(value = 18, message = "Age must be at least 18")\n    val age: Int\n)\n\n@PostMapping\nfun createUser(@RequestBody @Valid request: CreateUserRequest): ResponseEntity<User> {\n    // Implementation\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-validation",children:"Equivalent Snitch Validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'data class CreateUserRequest(\n    val name: String,\n    val email: String,\n    val age: Int\n)\n\nval ofCreateUserRequest = bodyValidator<CreateUserRequest>("valid user request") { request ->\n    when {\n        request.name.isBlank() -> throw ValidationException("Name is required")\n        !isValidEmail(request.email) -> throw ValidationException("Valid email is required")\n        request.age < 18 -> throw ValidationException("Age must be at least 18")\n        else -> request\n    }\n}\n\nval createUserReq by body(ofCreateUserRequest)\n\nPOST("users") with createUserReq isHandledBy {\n    // Implementation with validated request\n    val validatedRequest = request[createUserReq]\n    userService.create(validatedRequest).created\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrating-exception-handling",children:"Migrating Exception Handling"}),"\n",(0,r.jsxs)(n.p,{children:["Spring's ",(0,r.jsx)(n.code,{children:"@ExceptionHandler"})," and ",(0,r.jsx)(n.code,{children:"@ControllerAdvice"})," can be migrated to Snitch's exception handling:"]}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-exception-handling",children:"Spring Boot Exception Handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@ControllerAdvice\nclass GlobalExceptionHandler {\n    \n    @ExceptionHandler(ResourceNotFoundException::class)\n    fun handleResourceNotFound(ex: ResourceNotFoundException): ResponseEntity<ErrorResponse> {\n        return ResponseEntity\n            .status(HttpStatus.NOT_FOUND)\n            .body(ErrorResponse(ex.message ?: "Resource not found"))\n    }\n    \n    @ExceptionHandler(ValidationException::class)\n    fun handleValidation(ex: ValidationException): ResponseEntity<ErrorResponse> {\n        return ResponseEntity\n            .status(HttpStatus.BAD_REQUEST)\n            .body(ErrorResponse(ex.message ?: "Validation failed"))\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-exception-handling",children:"Equivalent Snitch Exception Handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'snitch(GsonJsonParser)\n    .onRoutes(routes)\n    .handleException(ResourceNotFoundException::class) { ex ->\n        ErrorResponse(ex.message ?: "Resource not found").notFound()\n    }\n    .handleException(ValidationException::class) { ex ->\n        ErrorResponse(ex.message ?: "Validation failed").badRequest()\n    }\n    .start()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"adapting-spring-services",children:"Adapting Spring Services"}),"\n",(0,r.jsx)(n.p,{children:"During migration, you'll likely keep using Spring services for a while. Here's how to bridge the gap:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'// Existing Spring service\n@Service\nclass UserServiceImpl(private val userRepository: UserRepository) : UserService {\n    // Implementation\n}\n\n// Snitch route using Spring service\nval springUserService = springContext.getBean(UserService::class.java)\n\nval userRoutes = routes {\n    "api" / "users" / {\n        GET(userId) isHandledBy {\n            // Use Spring service from Snitch handler\n            springUserService.findById(request[userId])\n                ?.ok\n                ?: "User not found".notFound()\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-migration",children:"Configuration Migration"}),"\n",(0,r.jsx)(n.p,{children:"Replace Spring's property-based configuration with Snitch's configuration:"}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-configuration",children:"Spring Boot Configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@Configuration\n@ConfigurationProperties(prefix = "app")\ndata class AppConfig(\n    var apiKey: String = "",\n    var maxConnections: Int = 10,\n    var timeoutSeconds: Int = 30\n)\n\n@RestController\nclass ConfiguredController(private val appConfig: AppConfig) {\n    // Use configuration\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-configuration",children:"Equivalent Snitch Configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'data class AppConfig(\n    val apiKey: String,\n    val maxConnections: Int,\n    val timeoutSeconds: Int\n)\n\nval config = ConfigFactory.load()\nval appConfig = AppConfig(\n    apiKey = config.getString("app.apiKey"),\n    maxConnections = config.getInt("app.maxConnections"),\n    timeoutSeconds = config.getInt("app.timeoutSeconds")\n)\n\nval configuredRoutes = routes {\n    // Use configuration\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing-approach",children:"Testing Approach"}),"\n",(0,r.jsx)(n.p,{children:"Migrate from Spring Boot testing to Snitch's testing DSL:"}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-test",children:"Spring Boot Test:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@SpringBootTest\n@AutoConfigureMockMvc\nclass UserControllerTest {\n    \n    @Autowired\n    private lateinit var mockMvc: MockMvc\n    \n    @MockBean\n    private lateinit var userService: UserService\n    \n    @Test\n    fun `should return user when found`() {\n        // Given\n        val user = User(1, "Test User", "test@example.com")\n        whenever(userService.findById(1)).thenReturn(Optional.of(user))\n        \n        // When/Then\n        mockMvc.perform(get("/api/users/1"))\n            .andExpect(status().isOk)\n            .andExpect(jsonPath("$.name").value("Test User"))\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-snitch-test",children:"Equivalent Snitch Test:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class UserRoutesTest : SnitchTest(/* configure app */) {\n    \n    private val userService = mockk<UserService>()\n    \n    init {\n        // Wire up the mock service\n        registerRoutes(createUserRoutes(userService))\n    }\n    \n    @Test\n    fun `should return user when found`() {\n        // Given\n        val user = User(1, "Test User", "test@example.com")\n        every { userService.findById(1) } returns user\n        \n        // When/Then\n        GET("/api/users/1")\n            .expectCode(200)\n            .expectJson {\n                it.path("name").asText() shouldBe "Test User"\n            }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion-embracing-idioms-over-conventions",children:"Conclusion: Embracing Idioms Over Conventions"}),"\n",(0,r.jsx)(n.p,{children:"Migrating from Spring Boot to Snitch is fundamentally about shifting from a convention-based approach to an idiomatic Kotlin approach. While Spring Boot hides complexity through conventions, Snitch makes behavior explicit through an expressive DSL."}),"\n",(0,r.jsx)(n.p,{children:"The migration process requires rethinking how your application is structured, but the rewards are substantial:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More readable, maintainable code"}),"\n",(0,r.jsx)(n.li,{children:"Stronger compile-time guarantees"}),"\n",(0,r.jsx)(n.li,{children:"Better performance characteristics"}),"\n",(0,r.jsx)(n.li,{children:"Automated documentation that stays in sync"}),"\n",(0,r.jsx)(n.li,{children:"A more natural Kotlin development experience"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By following an incremental approach and leveraging the patterns outlined above, you can successfully transition even large applications from Spring Boot to Snitch, unlocking the full potential of Kotlin for your web services."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);