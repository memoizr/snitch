"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[4202],{4043:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"tutorials/HandlingParameters","title":"Handling Parameters in Snitch","description":"This tutorial covers how to define, access, and validate different types of parameters in Snitch applications. Parameters are a crucial part of building APIs as they allow your endpoints to receive and process various kinds of input data.","source":"@site/docs/tutorials/HandlingParameters.md","sourceDirName":"tutorials","slug":"/tutorials/HandlingParameters","permalink":"/docs/tutorials/HandlingParameters","draft":false,"unlisted":false,"editUrl":"https://github.com/memoizr/snitch/tree/master/guides/docs/tutorials/HandlingParameters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Integration Tutorial","permalink":"/docs/tutorials/DatabaseIntegration"},"next":{"title":"Property-Based Testing with Kofix","permalink":"/docs/tutorials/PropertyBasedTesting"}}');var t=n(4848),s=n(8453);const i={},l="Handling Parameters in Snitch",d={},o=[{value:"Parameter Types",id:"parameter-types",level:2},{value:"Defining Parameters",id:"defining-parameters",level:2},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Header Parameters",id:"header-parameters",level:3},{value:"Body Parameters",id:"body-parameters",level:3},{value:"Accessing Parameters in Handlers",id:"accessing-parameters-in-handlers",level:2},{value:"Path Parameters",id:"path-parameters-1",level:3},{value:"Query Parameters",id:"query-parameters-1",level:3},{value:"Header Parameters",id:"header-parameters-1",level:3},{value:"Body Parameters",id:"body-parameters-1",level:3},{value:"Optional vs Required Parameters",id:"optional-vs-required-parameters",level:2},{value:"Parameter Validation",id:"parameter-validation",level:2},{value:"Real-World Example",id:"real-world-example",level:2},{value:"Advanced Parameter Handling",id:"advanced-parameter-handling",level:2},{value:"Organizing Parameters",id:"organizing-parameters",level:3},{value:"Parameter Conditions",id:"parameter-conditions",level:3},{value:"Custom Parameter Processing",id:"custom-parameter-processing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"handling-parameters-in-snitch",children:"Handling Parameters in Snitch"})}),"\n",(0,t.jsx)(a.p,{children:"This tutorial covers how to define, access, and validate different types of parameters in Snitch applications. Parameters are a crucial part of building APIs as they allow your endpoints to receive and process various kinds of input data."}),"\n",(0,t.jsx)(a.h2,{id:"parameter-types",children:"Parameter Types"}),"\n",(0,t.jsx)(a.p,{children:"Snitch supports several types of parameters:"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Path Parameters"}),": Variables embedded in the URL path"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Query Parameters"}),": Key-value pairs in the URL query string"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Header Parameters"}),": HTTP request headers"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Body Parameters"}),": Data in the request body (typically JSON)"]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Let's explore how to use each type of parameter in your Snitch applications."}),"\n",(0,t.jsx)(a.h2,{id:"defining-parameters",children:"Defining Parameters"}),"\n",(0,t.jsx)(a.p,{children:"Parameters in Snitch are defined using property delegates, making them type-safe and easy to use."}),"\n",(0,t.jsx)(a.h3,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,t.jsxs)(a.p,{children:["Path parameters are defined using the ",(0,t.jsx)(a.code,{children:"path()"})," delegate and are embedded directly in the URL path:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Define a path parameter\nval userId by path(ofInt, description = "User ID")\n\n// Use it in a route\nGET("users" / userId) isHandledBy { \n    // Handler code\n}\n'})}),"\n",(0,t.jsxs)(a.p,{children:["The ",(0,t.jsx)(a.code,{children:"ofInt"})," parameter is a validator that ensures the parameter can be parsed as an integer."]}),"\n",(0,t.jsx)(a.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsxs)(a.p,{children:["Query parameters are defined using the ",(0,t.jsx)(a.code,{children:"query()"})," delegate:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Define a query parameter\nval page by query(ofInt, description = "Page number")\nval limit by optionalQuery(ofInt, default = 10, description = "Items per page")\n\n// Use it in a route\nGET("users") withQuery page isHandledBy {\n    // Handler code\n}\n'})}),"\n",(0,t.jsx)(a.h3,{id:"header-parameters",children:"Header Parameters"}),"\n",(0,t.jsxs)(a.p,{children:["Header parameters are defined using the ",(0,t.jsx)(a.code,{children:"header()"})," delegate:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Define a header parameter\nval authorization by header(description = "Authorization token")\n\n// Use it in a route\nGET("secured") withHeader authorization isHandledBy {\n    // Handler code\n}\n'})}),"\n",(0,t.jsx)(a.h3,{id:"body-parameters",children:"Body Parameters"}),"\n",(0,t.jsx)(a.p,{children:"Body parameters are defined directly in the route definition:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Define a route with a body parameter\nPOST("users") with body<CreateUserRequest>() isHandledBy {\n    // Handler code\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"accessing-parameters-in-handlers",children:"Accessing Parameters in Handlers"}),"\n",(0,t.jsx)(a.p,{children:"Once parameters are defined, you can access them in your handlers using the request object."}),"\n",(0,t.jsx)(a.h3,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,t.jsx)(a.p,{children:"Access path parameters using indexed syntax:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'val userId by path(ofInt)\n\nval getUser by handling {\n    val id = request[userId]\n    userService.getUser(id)?.ok ?: "User not found".notFound()\n}\n'})}),"\n",(0,t.jsx)(a.h3,{id:"query-parameters-1",children:"Query Parameters"}),"\n",(0,t.jsx)(a.p,{children:"Query parameters are accessed the same way:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:"val page by query(ofInt)\nval limit by optionalQuery(ofInt, default = 10)\n\nval listUsers by handling {\n    val pageNum = request[page]\n    val pageSize = request[limit]\n    userService.getUsers(pageNum, pageSize).ok\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"header-parameters-1",children:"Header Parameters"}),"\n",(0,t.jsx)(a.p,{children:"Headers are accessed using the same syntax:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'val authorization by header()\n\nval securedEndpoint by handling {\n    val authHeader = request[authorization]\n    if (isValidToken(authHeader)) {\n        "Authenticated".ok\n    } else {\n        "Unauthorized".unauthorized()\n    }\n}\n'})}),"\n",(0,t.jsx)(a.h3,{id:"body-parameters-1",children:"Body Parameters"}),"\n",(0,t.jsxs)(a.p,{children:["Body parameters are accessed using the ",(0,t.jsx)(a.code,{children:"body"})," property:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'val createUser by parsing<CreateUserRequest>() handling {\n    val name = body.name\n    val email = body.email\n    userService.createUser(name, email)\n    "User created".created\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"optional-vs-required-parameters",children:"Optional vs Required Parameters"}),"\n",(0,t.jsxs)(a.p,{children:["By default, parameters defined with ",(0,t.jsx)(a.code,{children:"path()"}),", ",(0,t.jsx)(a.code,{children:"query()"}),", and ",(0,t.jsx)(a.code,{children:"header()"})," are required. If a required parameter is missing or invalid, Snitch automatically returns a 400 Bad Request response."]}),"\n",(0,t.jsxs)(a.p,{children:["For optional parameters, use the ",(0,t.jsx)(a.code,{children:"optionalPath()"}),", ",(0,t.jsx)(a.code,{children:"optionalQuery()"}),", and ",(0,t.jsx)(a.code,{children:"optionalHeader()"})," delegates:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:"// Required parameter\nval userId by path(ofInt)\n\n// Optional parameter with default value\nval page by optionalQuery(ofInt, default = 1)\n\n// Optional parameter without default (will be null if missing)\nval filter by optionalQuery()\n"})}),"\n",(0,t.jsx)(a.p,{children:"When accessing optional parameters without defaults, check for null values:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:"val listUsers by handling {\n    val filterValue = request[filter]\n    val users = if (filterValue != null) {\n        userService.getUsersWithFilter(filterValue)\n    } else {\n        userService.getAllUsers()\n    }\n    users.ok\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"parameter-validation",children:"Parameter Validation"}),"\n",(0,t.jsx)(a.p,{children:"Snitch provides built-in validators for common parameter types:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofInt"}),": Validates that the parameter is an integer"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofLong"}),": Validates that the parameter is a long integer"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofDouble"}),": Validates that the parameter is a double"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofBoolean"}),": Validates that the parameter is a boolean"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofNonNegativeInt"}),": Validates that the parameter is a non-negative integer"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ofEmail"}),": Validates that the parameter is a valid email address"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"matches(regex)"}),": Validates that the parameter matches a regular expression"]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"You can also create custom validators:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Custom validator for UUIDs\nval ofUUID = validator { input ->\n    try {\n        UUID.fromString(input)\n        input\n    } catch (e: IllegalArgumentException) {\n        throw InvalidParameterException("Invalid UUID format")\n    }\n}\n\n// Use the custom validator\nval orderId by path(ofUUID, description = "Order ID in UUID format")\n'})}),"\n",(0,t.jsx)(a.h2,{id:"real-world-example",children:"Real-World Example"}),"\n",(0,t.jsx)(a.p,{children:"Here's a more complete example showing different parameter types in action:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Parameter definitions\nval userId by path(ofInt, description = "User ID")\nval page by optionalQuery(ofNonNegativeInt, default = 1, description = "Page number")\nval limit by optionalQuery(ofNonNegativeInt, default = 10, description = "Items per page")\nval authorization by header(description = "Bearer token")\n\n// Route definitions\nval routes = routes {\n    // Get user by ID\n    GET("users" / userId) isHandledBy {\n        val id = request[userId]\n        userService.getUser(id)?.ok ?: "User not found".notFound()\n    }\n    \n    // List users with pagination\n    GET("users") withQuery page withQuery limit isHandledBy {\n        val pageNum = request[page]\n        val pageSize = request[limit]\n        userService.getUsers(pageNum, pageSize).ok\n    }\n    \n    // Create user with request body\n    POST("users") with body<CreateUserRequest>() isHandledBy {\n        val newUser = userService.createUser(body.name, body.email)\n        newUser.created\n    }\n    \n    // Secured endpoint with authorization header\n    GET("secured") withHeader authorization isHandledBy {\n        val token = request[authorization]\n        if (isValidToken(token)) {\n            "Authenticated".ok\n        } else {\n            "Unauthorized".unauthorized()\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"advanced-parameter-handling",children:"Advanced Parameter Handling"}),"\n",(0,t.jsx)(a.h3,{id:"organizing-parameters",children:"Organizing Parameters"}),"\n",(0,t.jsx)(a.p,{children:"For better organization, you can group related parameters in objects:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'object Paths {\n    val userId by path(ofInt)\n    val postId by path(ofInt)\n}\n\nobject Queries {\n    val page by optionalQuery(ofNonNegativeInt, default = 1)\n    val limit by optionalQuery(ofNonNegativeInt, default = 10)\n}\n\nobject Headers {\n    val authorization by header()\n}\n\n// Using organized parameters\nGET("users" / Paths.userId / "posts" / Paths.postId) isHandledBy {\n    val userId = request[Paths.userId]\n    val postId = request[Paths.postId]\n    // ...\n}\n'})}),"\n",(0,t.jsx)(a.h3,{id:"parameter-conditions",children:"Parameter Conditions"}),"\n",(0,t.jsx)(a.p,{children:"You can add conditions to parameters that must be satisfied:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'// Define a condition for token validation\nval validToken = condition<String> { token ->\n    jwtService.validateToken(token)\n}\n\n// Apply the condition to a parameter\nval accessToken by header(\n    condition = validToken,\n    name = "X-Access-Token",\n    description = "Valid access token"\n)\n'})}),"\n",(0,t.jsx)(a.h3,{id:"custom-parameter-processing",children:"Custom Parameter Processing"}),"\n",(0,t.jsxs)(a.p,{children:["For complex parameter processing, you can use the ",(0,t.jsx)(a.code,{children:"parsing"})," handler:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-kotlin",children:'val createUser by parsing<CreateUserRequest>() handling {\n    // Validate and transform the request body\n    val sanitizedName = sanitizeInput(body.name)\n    val normalizedEmail = normalizeEmail(body.email)\n    \n    // Use the processed parameters\n    userService.createUser(sanitizedName, normalizedEmail)\n    "User created".created\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Use Descriptive Names"}),": Choose parameter names that clearly indicate their purpose."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Add Descriptions"}),": Include descriptions for all parameters to improve API documentation."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Validate Inputs"}),": Use appropriate validators to ensure parameters meet your requirements."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Handle Errors Gracefully"}),": Provide meaningful error messages when parameter validation fails."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Group Related Parameters"}),": Organize parameters into logical groups for better code organization."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Use Appropriate Parameter Types"}),": Choose the right parameter type (path, query, header, body) based on your API design."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Make Parameters Optional When Appropriate"}),": Don't require parameters that aren't strictly necessary."]}),"\n"]}),"\n",(0,t.jsxs)(a.li,{children:["\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.strong,{children:"Set Sensible Defaults"}),": Provide meaningful default values for optional parameters."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(a.p,{children:"Snitch's parameter handling system provides a type-safe, declarative way to define and validate request parameters. By using the right parameter types and validation rules, you can create robust APIs that gracefully handle various input scenarios."})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var r=n(6540);const t={},s=r.createContext(t);function i(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);